<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 암호화처리 bean등록 -->
	<beans:bean 
		id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<beans:bean 
		id="customSuccessHandler" 
		class="com.kh.spring.member.controller.CustomSuccessHandler"/>
		
	<!-- #3. 인증/권한 검사 설정 -->
	<!-- 정적파일은 security체크하지 않음 -->
	<http pattern="/resources/**" security="none"/>
	
	<!-- 특별한 설정에서 일반적인 설정순으로 작성 -->
	<http auto-config="true">
		<intercept-url pattern="/" access="permitAll"/>		
		<intercept-url pattern="/index.jsp" access="permitAll"/>
		<intercept-url pattern="/member/memberLogin.do" access="permitAll"/>
		<intercept-url pattern="/anonymous/**" access="isAnonymous()"/>
		
		<intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
				
		<intercept-url pattern="/**" access="isAuthenticated()"/>
		
		<!-- 
			login-page : 로그인폼 페이지 요청 GET (실제 핸들러 작성)
			login-processing-url : 로그인 처리요청 POST (핸들러 작성하지 않음)
			
			시큐리티가 관리할 때 아이디와 비밀번호는 username과 password로 고정되어있다. 
			이렇게 된 설정을 오버라이드 하기 위해서 username-parameter와 password-parameter를 사용한다. 
			username-parameter : The name of the request parameter which contains the username. Defaults to 'username'
			default-target-url : The URL that will be redirected to after successful authentication
			always-use-default-target : Whether the user should always be redirected to the default-target-url after login
			
			authentication-success-forward-url : 성공 후 포워딩할 url 
				- /member/memberLoginSuccess.do 핸들러 작성해둘것
		 -->
		<form-login
			login-page="/member/memberLogin.do"
			login-processing-url="/member/memberLogin.do"
			username-parameter="id"
			password-parameter="password"
			default-target-url="/"
			always-use-default-target="false"
			authentication-success-handler-ref="customSuccessHandler"/>
			
		<!-- logout-url : 로그아웃폼의 제출 주소 -->
		<logout
			logout-url="/member/memberLogout.do"
			logout-success-url="/"
			invalidate-session="true"/>
			
		<!-- 모든 POST요청에 csrf토큰값을 검증한다. -->			
		<csrf disabled="false"/>
		
		<!-- Remember Me 등록 -->
		<!-- token-validity-seconds 리멤버미토큰 유효시간(초) 60 * 60 * 24 * 14 -->
		<remember-me 
			data-source-ref="dataSource" 
			token-validity-seconds="1209600"/>
		
		<!-- 403 페이지 처리 -->
		<!-- 403 : 요청이 합법적인 요청이었지만 서버가 응답을 거부하고 있습니다. -->
		<access-denied-handler error-page="/error/accessDenied.do"/>
		
	</http>
	
	
	
	<authentication-manager>
		<authentication-provider user-service-ref="securityService">
			<password-encoder ref="bcryptPasswordEncoder"/>
<!-- 
			<user-service>
				<user 
				name="hyunha" 
				password="1234"
				authorities="ROLE_USER"/>
				<user 
				name="admin"
				password="1234" 
				authorities="ROLE_ADMIN"/>
			</user-service>
 -->			
		</authentication-provider>
	</authentication-manager>
	
	<!-- com.kh.security 하위 클래스 빈등록 -->
	<context:component-scan base-package="com.kh.security"/>
		
</beans:beans>
