/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-20 16:34:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class smart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>스마트 가전센터</title>\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("div.container{\r\n");
      out.write("	float: left;\r\n");
      out.write("	width: 29%;\r\n");
      out.write("	height:300px;\r\n");
      out.write("    margin: 10px;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("	background:lightgrey;\r\n");
      out.write("	text-align:center;\r\n");
      out.write("}\r\n");
      out.write("table {\r\n");
      out.write("	border:1px solid;\r\n");
      out.write("	margin:auto;\r\n");
      out.write("}\r\n");
      out.write("td,th {\r\n");
      out.write("	border:1px solid;\r\n");
      out.write("}\r\n");
      out.write("span#time{\r\n");
      out.write("	text-decoration:underline;\r\n");
      out.write("	margin: 15px;\r\n");
      out.write("    display: block;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>스마트 가전 센터 주문페이지</h1>\r\n");
      out.write("<p>\r\n");
      out.write("	1. ajax를 이용해서 제품주문을 처리하고, 실시간 판매현황(최근5건)에 출력하세요. <br />\r\n");
      out.write("	2. 10초마다 판매랭킹리스트(상위5개제품과 누적판매량)를 갱신하는 ajax함수를 작성하세요. <br />\r\n");
      out.write("	(bonus) 현재시각을 표시하세요.\r\n");
      out.write("</p>\r\n");
      out.write("<div id=\"order-container\" class=\"container\">\r\n");
      out.write("	<h2>주문</h2>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>제품명</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<select name=\"pname\" id=\"pname\" required>\r\n");
      out.write("					<option value=\"iPhoneX\">iPhoneX</option>\r\n");
      out.write("					<option value=\"iPhone7\">iPhone7</option>\r\n");
      out.write("					<option value=\"iPhone7Plus\">iPhone7Plus</option>\r\n");
      out.write("					<option value=\"GalaxyNote8\">GalaxyNote8</option>\r\n");
      out.write("					<option value=\"Galaxy8\">Galaxy8</option>\r\n");
      out.write("					<option value=\"샤오미맥스2\">샤오미맥스2</option>\r\n");
      out.write("					<option value=\"LGV30\">LGV30</option>\r\n");
      out.write("				</select>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>주문량</th>\r\n");
      out.write("			<td><input type=\"number\" id=\"amount\" name=\"amount\" min=\"1\" value=\"1\" required></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\" align=\"center\">\r\n");
      out.write("				<input type=\"button\" id=\"btn-order\" value=\"주문\" />\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<h2>주문리스트</h2>\r\n");
      out.write("	<div id=\"order-list\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>제품명</th>\r\n");
      out.write("					<th>수량</th>\r\n");
      out.write("					<th>주문일자</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody></tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<h2>인기순위</h2>\r\n");
      out.write("	<span id=\"time\" onload=\"displayClock()\"></span>\r\n");
      out.write("	<div id=\"rank-list\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>순위</th>\r\n");
      out.write("					<th>제품명</th>\r\n");
      out.write("					<th>누적판매량</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody></tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("// 주문\r\n");
      out.write("$(\"#btn-order\").click((e) =>{\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url: \"");
      out.print( request.getContextPath() );
      out.write("/smart/smartList\",\r\n");
      out.write("		dataType: \"json\",\r\n");
      out.write("		data: {\r\n");
      out.write("			'pname': $(\"#pname\").val(), \r\n");
      out.write("			'amount': $(\"#amount\").val()},\r\n");
      out.write("		success(data){\r\n");
      out.write("			console.log(data);\r\n");
      out.write("			\r\n");
      out.write("			const $tbody = $(\"#order-list\").find(\"tbody\");\r\n");
      out.write("			$tbody.empty();\r\n");
      out.write("			\r\n");
      out.write("			$(data).each((i, {pname, amount, pdate}) => {\r\n");
      out.write("				// console.log(pname, amount, pdate);\r\n");
      out.write("				const tr = `<tr>\r\n");
      out.write("					<td>${pname}</td>\r\n");
      out.write("					<td>${amount}</td>\r\n");
      out.write("					<td>${pdate}</td>\r\n");
      out.write("				</tr>`;\r\n");
      out.write("				$tbody.append(tr); \r\n");
      out.write("			});\r\n");
      out.write("		},\r\n");
      out.write("		error: console.log\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	$(\"#amount\").val(1);\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 페이지 로딩시 실시간 판매현황 바로 한번 찍힌다.\r\n");
      out.write("$(() => {\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url: \"");
      out.print( request.getContextPath() );
      out.write("/smart/orderList\",\r\n");
      out.write("		dataType: \"json\",\r\n");
      out.write("		success(data){\r\n");
      out.write("			console.log(data);\r\n");
      out.write("			const $tbody = $(\"#order-list\").find(\"tbody\");\r\n");
      out.write("			$tbody.empty();\r\n");
      out.write("			\r\n");
      out.write("			$(data).each((i, {pname, amount, pdate}) => {\r\n");
      out.write("				// console.log(pname, amount, pdate);\r\n");
      out.write("				const tr = `<tr>\r\n");
      out.write("					<td>${pname}</td>\r\n");
      out.write("					<td>${amount}</td>\r\n");
      out.write("					<td>${pdate}</td>\r\n");
      out.write("				</tr>`;\r\n");
      out.write("				$tbody.append(tr); \r\n");
      out.write("			});\r\n");
      out.write("		},\r\n");
      out.write("		error: console.log\r\n");
      out.write("	});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 인기순위 갱신\r\n");
      out.write("$(() => {\r\n");
      out.write("	(function foo() {\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: \"");
      out.print( request.getContextPath() );
      out.write("/smart/rankList\",\r\n");
      out.write("			dataType: \"json\",\r\n");
      out.write("			success(data){\r\n");
      out.write("				console.log(data);\r\n");
      out.write("				const $tbody = $(\"#rank-list\").find(\"tbody\");\r\n");
      out.write("				$tbody.empty();\r\n");
      out.write("				\r\n");
      out.write("				$(data).each((i, {rank, pname, accAmount}) => {\r\n");
      out.write("					// console.log(pname, amount, pdate);\r\n");
      out.write("					const tr = `<tr>\r\n");
      out.write("						<td>${rank}</td>\r\n");
      out.write("						<td>${pname}</td>\r\n");
      out.write("						<td>${accAmount}</td>\r\n");
      out.write("					</tr>`;\r\n");
      out.write("					$tbody.append(tr); \r\n");
      out.write("				});\r\n");
      out.write("			},\r\n");
      out.write("			error: console.log\r\n");
      out.write("		});\r\n");
      out.write("		setTimeout(foo, 10000);\r\n");
      out.write("	})();\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function displayClock() {\r\n");
      out.write("    const f = function(n){\r\n");
      out.write("        return n < 10 ? `0${n}` : n;\r\n");
      out.write("    };\r\n");
      out.write("    const now = new Date();\r\n");
      out.write("    const year = now.getFullYear();\r\n");
      out.write("    const month = f(now.getMonth() + 1);\r\n");
      out.write("    const date = f(now.getDate());\r\n");
      out.write("    const hour = f(now.getHours());\r\n");
      out.write("    const minute = f(now.getMinutes());\r\n");
      out.write("    const second = f(now.getSeconds());\r\n");
      out.write("    let a = 0;\r\n");
      out.write("    if(hour > 12)\r\n");
      out.write("    	a = \"오후\";\r\n");
      out.write("    else\r\n");
      out.write("    	a = \"오전\";\r\n");
      out.write("\r\n");
      out.write("    return `${year}년 ${month}월 ${date}일 ${a} ${hour}:${minute}:${second}`;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("(function repeatClock() {\r\n");
      out.write("    time.innerHTML = displayClock();\r\n");
      out.write("    setTimeout(repeatClock, 1000); // callback함수를 1000밀리초후에 실행\r\n");
      out.write("})();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
