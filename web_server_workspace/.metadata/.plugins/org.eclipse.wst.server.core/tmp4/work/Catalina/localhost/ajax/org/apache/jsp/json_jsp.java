/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-18 18:01:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class json_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("table {\r\n");
      out.write("	border: 1px solid #000;\r\n");
      out.write("	border-collapse: collapse;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("}\r\n");
      out.write("th, td {\r\n");
      out.write("	border: 1px solid #000;\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("}\r\n");
      out.write("table img {\r\n");
      out.write("	width: 100px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>json</h1>\r\n");
      out.write("	<button id=\"btn\">전체조회</button>\r\n");
      out.write("	<div class=\"celeb-container\">\r\n");
      out.write("		<table id=\"tbl-celeb-list\">\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<th>전화번호</th>\r\n");
      out.write("					<th>나이</th>\r\n");
      out.write("					<th>프로필</th>\r\n");
      out.write("					<th>결혼여부</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody></tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("	$(btn).click((e) => {\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: \"");
      out.print( request.getContextPath() );
      out.write("/json/celebList.do\",\r\n");
      out.write("			dataType: \"json\",\r\n");
      out.write("			success(data){\r\n");
      out.write("				console.log(data);\r\n");
      out.write("				\r\n");
      out.write("				const $tbody = $(\"#tbl-celeb-list tbody\").empty();\r\n");
      out.write("				\r\n");
      out.write("				$(data).each((i, {name, phone, age, profile, married}) => {\r\n");
      out.write("					const tr = `<tr>\r\n");
      out.write("						<td>${name}</td>\r\n");
      out.write("						<td>${phone}</td>\r\n");
      out.write("						<td>${age}</td>\r\n");
      out.write("						<td>\r\n");
      out.write("							<img src=\"");
      out.print( request.getContextPath() );
      out.write("/images/${profile}\" alt=\"\" />\r\n");
      out.write("						</td>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"checkbox\" ${married ? 'checked' : ''}/>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>`;\r\n");
      out.write("					$tbody.append(tr);\r\n");
      out.write("				});\r\n");
      out.write("			},\r\n");
      out.write("			error: console.log\r\n");
      out.write("		}); \r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<hr />\r\n");
      out.write("	\r\n");
      out.write("	<input type=\"number\" id=\"index\" />\r\n");
      out.write("	<button id=\"btn2\">인덱스조회</button>\r\n");
      out.write("	<div class=\"celeb-container\">\r\n");
      out.write("		<table id=\"tbl-celeb-one\"></table>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("	$(btn2).click((e) => {\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: \"");
      out.print( request.getContextPath() );
      out.write("/json/celebOne.do\",\r\n");
      out.write("			data: {\r\n");
      out.write("				index: $(index).val()\r\n");
      out.write("			},\r\n");
      out.write("			success(data){\r\n");
      out.write("				console.log(data);\r\n");
      out.write("				if(data == null){\r\n");
      out.write("					alert(\"조회된 Celeb이 없습니다.\");\r\n");
      out.write("					return;\r\n");
      out.write("				}\r\n");
      out.write("				const {name, phone, age, profile, married} = data;\r\n");
      out.write("				const $table = $(\"#tbl-celeb-one\");\r\n");
      out.write("				const $tbody = `<tbody>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td rowspan=\"4\">\r\n");
      out.write("							<img src=\"");
      out.print( request.getContextPath() );
      out.write("/images/${profile}\" alt=\"\" />\r\n");
      out.write("						</td>\r\n");
      out.write("						<td>이름</td>\r\n");
      out.write("						<td>${name}</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>전화번호</td>\r\n");
      out.write("						<td>${phone}</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>나이</td>\r\n");
      out.write("						<td>${age}</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>결혼여부</td>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"checkbox\" ${married ? \"checked\" : \"\"}/>\r\n");
      out.write("						</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</tbody>`;\r\n");
      out.write("				\r\n");
      out.write("				$table.html($tbody);\r\n");
      out.write("			},\r\n");
      out.write("			error: console.log\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr />\r\n");
      out.write("	<h2>Celeb등록</h2>\r\n");
      out.write("	<div class=\"celeb-container\">\r\n");
      out.write("		<form name=\"celebEnrollFrm\">\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" required/></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>전화번호</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"phone\" required/></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>나이</th>\r\n");
      out.write("					<td><input type=\"number\" name=\"age\" required/></td>\r\n");
      out.write("				</tr>							\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>프로필</th>\r\n");
      out.write("					<td><input type=\"file\" name=\"profile\" /></td>\r\n");
      out.write("				</tr>	\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>결혼여부</th>\r\n");
      out.write("					<td><input type=\"checkbox\" name=\"married\" /></td>\r\n");
      out.write("				</tr>		\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th colspan=\"2\">\r\n");
      out.write("						<input type=\"submit\" value=\"등록\" />\r\n");
      out.write("					</th>\r\n");
      out.write("				</tr>					\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("	$(document.celebEnrollFrm).submit((e) => {\r\n");
      out.write("		e.preventDefault(); // 제출방지\r\n");
      out.write("		/*\r\n");
      out.write("		const celeb = {\r\n");
      out.write("				name: $(\"[name=name]\", e.target).val(),\r\n");
      out.write("				phone: $(\"[name=phone]\", e.target).val(),\r\n");
      out.write("				age: $(\"[name=age]\", e.target).val(),\r\n");
      out.write("		};\r\n");
      out.write("		if($(\"[name=married]\", e.target).is(\":checked\"))\r\n");
      out.write("			celeb.married = \"on\";\r\n");
      out.write("		*/\r\n");
      out.write("		\r\n");
      out.write("		// 파일전송을 위해 FormData객체 변환\r\n");
      out.write("		const formData = new FormData(document.celebEnrollFrm);\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: \"");
      out.print( request.getContextPath() );
      out.write("/json/celebEnroll.do\",\r\n");
      out.write("			method: \"POST\",\r\n");
      out.write("			data: formData,\r\n");
      out.write("			enctype: \"multipart/form-data\", //파일 업로드하기 위한 것 // 생략 가능\r\n");
      out.write("			processData: false, // Content-Type: application/x-www-formurlencoded에 따른 처리 안함 //파일 업로드하기 위한 것. 생략 불가\r\n");
      out.write("			contentType: false, // Content-Type: application/x-www-formurlencoded 설정 하지 않음. //파일 업로드하기 위한 것. 생략 불가\r\n");
      out.write("			dataType: \"json\",\r\n");
      out.write("			success(data){\r\n");
      out.write("				console.log(data);\r\n");
      out.write("				alert(data.msg);\r\n");
      out.write("				\r\n");
      out.write("				$(btn).trigger(\"click\"); //click핸들러 호출\r\n");
      out.write("			},\r\n");
      out.write("			error: console.log,\r\n");
      out.write("			complete(){\r\n");
      out.write("				document.celebEnrollFrm.reset(); // 폼 초기화 // reset은 jquery에 없다\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("	<h2>일일 박스오피스 조회</h2>\r\n");
      out.write("	<div>\r\n");
      out.write("		<input type=\"date\" id=\"targetDt\" />\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"boxoffice-container\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>순위</th>\r\n");
      out.write("					<th>영화제목</th>\r\n");
      out.write("					<th>누적관객수(만)</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody></tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("	$(() => {\r\n");
      out.write("		// 페이지 로딩시 어제날짜의 박스오피스 조회\r\n");
      out.write("		const today = new Date();\r\n");
      out.write("		const yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1);\r\n");
      out.write("		//console.log(yesterday);\r\n");
      out.write("		\r\n");
      out.write("		// #targetDt 날짜 채우기 : yyyy-mm-dd\r\n");
      out.write("		const value = `${yesterday.getFullYear()}-${f(yesterday.getMonth() + 1)}-${f(yesterday.getDate())}`;\r\n");
      out.write("		$(targetDt).val(value);\r\n");
      out.write("		\r\n");
      out.write("		getDailyBoxOffice(yesterday);\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	$(targetDt).change((e) => {\r\n");
      out.write("		const d = new Date($(e.target).val());\r\n");
      out.write("		console.log($(e.target).val());\r\n");
      out.write("		getDailyBoxOffice(d);\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	const f = n => n < 10 ? \"0\" + n : n;\r\n");
      out.write("	\r\n");
      out.write("	const getDailyBoxOffice = (d) => {\r\n");
      out.write("		const value = `${d.getFullYear()}${f(d.getMonth() + 1)}${f(d.getDate())}`;\r\n");
      out.write("		console.log(value);\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: \"http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json\",\r\n");
      out.write("			data: {\r\n");
      out.write("				key: \"5814a3688b740b4d452581698c9176e4\",\r\n");
      out.write("				targetDt: value\r\n");
      out.write("			},\r\n");
      out.write("			dataType: \"json\",\r\n");
      out.write("			success(data){\r\n");
      out.write("				console.log(data);\r\n");
      out.write("				//console.log(data.boxOfficeResult.dailyBoxOfficeList);\r\n");
      out.write("				const movies = data.boxOfficeResult.dailyBoxOfficeList;\r\n");
      out.write("				const $tbody = $(\".boxoffice-container tbody\").empty();\r\n");
      out.write("				//console.log(movies);			\r\n");
      out.write("				\r\n");
      out.write("				movies.forEach(({rnum, movieNm, audiAcc}, i) => {\r\n");
      out.write("					const tr =`<tr>\r\n");
      out.write("						<td>${rnum}</td>\r\n");
      out.write("						<td>${movieNm}</td>\r\n");
      out.write("						<td>${Math.round((audiAcc / 10000) * 10) / 10}(만)</td>\r\n");
      out.write("					</tr>`;\r\n");
      out.write("					$tbody.append(tr);\r\n");
      out.write("				});	\r\n");
      out.write("			},\r\n");
      out.write("			error: console.log\r\n");
      out.write("		});\r\n");
      out.write("	};\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("	<br />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
